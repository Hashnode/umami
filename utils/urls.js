import { toUnicode } from 'punycode/';
import { Base64 } from 'js-base64';

const hashnodeEnv = process.env.NEXT_PUBLIC_HASHNODE_ENV;
const isDevEnv = hashnodeEnv === 'development';
const isStagingEnv = hashnodeEnv === 'staging';

const protocol = isDevEnv ? 'http:' : 'https:';

const publicationDomainNames = {
  development: 'app.localhost',
  staging: 'hashnode.net',
  test: 'hashnode.net',
  production: 'hashnode.dev',
};

export function getHostNameFromUrl(url) {
  const { hostname } = new URL(url);
  return toUnicode(hostname);
}

const stripEmojis = str =>
  str
    .replace(
      /([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g,
      '',
    )
    .replace(/\s+/g, ' ')
    .trim();

export const getAppUrl = () => {
  const NEXT_PUBLIC_HASHNODE_ENV = process.env.NEXT_PUBLIC_HASHNODE_ENV;
  let url;

  switch (NEXT_PUBLIC_HASHNODE_ENV) {
    case 'development':
      url = 'http://localhost:8080';
      break;
    case 'staging':
      url = 'https://staging.hashnode.com';
      break;
    case 'production':
      url = 'https://hashnode.com';
      break;
    default:
      url = 'http://localhost:8080';
      break;
  }
  return url;
};

export const getGQLUrl = () => {
  const NEXT_PUBLIC_HASHNODE_ENV = process.env.NEXT_PUBLIC_HASHNODE_ENV;
  const NEXT_PUBLIC_GQL_URL = process.env.NEXT_PUBLIC_GQL_URL;
  let url;

  switch (NEXT_PUBLIC_HASHNODE_ENV) {
    case 'development':
      url = NEXT_PUBLIC_GQL_URL;
      break;
    case 'staging':
      url = 'https://gql.hashnode.xyz';
      break;
    case 'production':
      url = 'https://gql.hashnode.com';
      break;
    default:
      url = 'http://localhost:3001';
      break;
  }
  return url;
};

const isValidPublicationDomainNamesKey = key => key in publicationDomainNames;

export const createPublicationOrigin = publication => {
  if (!publication || (!publication?.domain && !publication?.username)) {
    // using the hashnode domain as a fallback in order to prevent errors
    return getAppUrl();
  }
  const { domain, username, domainStatus } = publication;

  const hasReadyDomain = !!domain && !!domainStatus?.ready;

  // always use prod as default to make sure prod works
  let subDomain = hasReadyDomain ? '' : `${username}.`;
  if (isDevEnv || isStagingEnv) {
    subDomain = `${username}.`;
  }

  let domainName = hasReadyDomain ? domain : publicationDomainNames.production;
  if ((isDevEnv || isStagingEnv) && isValidPublicationDomainNamesKey(hashnodeEnv)) {
    domainName = publicationDomainNames[hashnodeEnv];
  }
  return `${protocol}//${subDomain}${domainName}`;
};

/**
 * Creates OG image for a publication if no OG is provided
 */
export const getAutogeneratedPublicationOG = publication => {
  const {
    title,
    logo,
    darkModeLogo,
    headerColor,
    isTeam,
    darkModeEnabled,
    favicon,
    author,
    url,
    numPosts,
    numFollowers,
    description,
  } = publication;

  const hostname = getHostNameFromUrl(url);
  const ogUrl = `https://${hostname}/api/og/home`;
  const ogData = {};

  try {
    ogData.title = title
      ? encodeURIComponent(stripEmojis(title))
      : `${author.name}'s ${isTeam ? 'team' : ''} blog`;
    ogData.domain = hostname;
    ogData.followers = isTeam ? numFollowers : author.numFollowers;

    if (author.photo && !isTeam) {
      ogData.photo = author.photo;
    }

    if (headerColor) {
      ogData.bgcolor = headerColor;
    }

    if (logo) {
      ogData.logo = logo;
    }

    if (darkModeLogo) {
      ogData.logoDark = darkModeLogo;
    }

    if (isTeam) {
      ogData.isTeam = isTeam;
    }

    if (description) {
      ogData.meta = encodeURIComponent(stripEmojis(description)); // Vercel OG is not able to work with all kinds of emojis
    }

    if (favicon) {
      ogData.favicon = favicon;
    }

    if (numPosts && numPosts > 0) {
      ogData.articles = numPosts;
    }

    if (darkModeEnabled) {
      ogData.isDefaultModeDark = true;
    }
  } catch (e) {
    console.log(e);
  }
  return `${ogUrl}?og=${Base64.encode(JSON.stringify(ogData))}`;
};
